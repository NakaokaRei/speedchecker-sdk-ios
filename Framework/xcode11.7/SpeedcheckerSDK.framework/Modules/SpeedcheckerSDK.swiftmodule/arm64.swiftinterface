// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SpeedcheckerSDK
import SystemConfiguration.CaptiveNetwork
import CoreLocation
import CoreTelephony
import Darwin
import DataCompression
import Foundation
import NetworkExtension
import Socket
import Swift
import SystemConfiguration
import UIKit
import XMLParsing
import os
public enum SCIssueSignalMeasurementStrength : Swift.Int, Swift.Codable {
  case weak
  case ok
  case veryGood
  case excellent
  public func convertToDB() -> Swift.Int
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class SCSignalHelper {
  public init()
  public func getWiFiInfo() -> (ssid: Swift.String, bssid: Swift.String)
  public func getCellularInfo() -> (id: Swift.String, mcc: Swift.String, mnc: Swift.String, technology: Swift.String)
  public func getSignalStrengh() -> (cellStrength: SpeedcheckerSDK.SCIssueSignalMeasurementStrength?, wiFiStrength: SpeedcheckerSDK.SCIssueSignalMeasurementStrength?)
  @objc deinit
}
public enum SCError : Swift.Error {
  case invalidSettings
  case invalidEnvironment
  case invalidArgument
  case invalidRequest
  case requestFailed
  case invalidResponse
  case responseFailed
  public static func == (a: SpeedcheckerSDK.SCError, b: SpeedcheckerSDK.SCError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum SCTestError : Swift.Int {
  case none
  case invalidSettings
  case invalidServers
  case progress
  case failed
  case notSaved
  case cancelled
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct SCLoggerDetail : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SCLogger {
  public static var sdkVersion: Swift.String
  public static func append(_ scope: Swift.String, _ value: Swift.String)
  public static func breakline(_ description: Swift.String)
  public static func send(from sender: Swift.String, isError: Swift.Bool = false, completion: @escaping (Swift.Bool) -> Swift.Void)
  public static func getDetails(sender: Swift.String) -> SpeedcheckerSDK.SCLoggerDetail
}
public enum SCNetworkStatus {
  case none
  case wifi
  case cellular
  case simulator
  public static func == (a: SpeedcheckerSDK.SCNetworkStatus, b: SpeedcheckerSDK.SCNetworkStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct SCNetwork {
  public init(status: SpeedcheckerSDK.SCNetworkStatus)
}
extension String {
  public var md5: Swift.String {
    get
  }
}
public protocol SwiftyPingDelegate {
  func swiftyPing(_ ping: SpeedcheckerSDK.SwiftyPing, response: SpeedcheckerSDK.PingResponse)
  func swiftyPing(_ ping: SpeedcheckerSDK.SwiftyPing, error: Foundation.NSError)
}
@objc @_hasMissingDesignatedInitializers public class SwiftyPing : ObjectiveC.NSObject {
  public var delegate: SpeedcheckerSDK.SwiftyPingDelegate?
  @objc deinit
  public func start()
  public func stop()
  @objc override dynamic public init()
}
@objc public class PingResponse : ObjectiveC.NSObject {
  public var identifier: Swift.UInt32
  public var ipAddress: Swift.String?
  public var sequenceNumber: Swift.Int64
  public var duration: Foundation.TimeInterval
  public var error: Foundation.NSError?
  public init(id: Swift.UInt32, ipAddress addr: Swift.String?, sequenceNumber number: Swift.Int64, duration dur: Foundation.TimeInterval, error err: Foundation.NSError?)
  @objc deinit
  @objc override dynamic public init()
}
public struct PingConfiguration {
  public init(interval: Foundation.TimeInterval = 1, with timeout: Foundation.TimeInterval = 3, and payload: Swift.UInt64 = 4)
  public init(interval: Foundation.TimeInterval)
  public init(interval: Foundation.TimeInterval, with timeout: Foundation.TimeInterval)
}
extension Data {
  public var socketAddress: Darwin.sockaddr? {
    get
  }
  public var socketAddressInternet: Darwin.sockaddr_in? {
    get
  }
}
public enum ConnectionIssue : Swift.Int {
  case callDrop
  case poorCallQuality
  case noSignal
  case unableToMakeCall
  case noMobileInternet
  case slowInternetSpeed
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class InternetSpeedTest : ObjectiveC.NSObject {
  final public let userID: Swift.Int
  final public let clientID: Swift.Int
  final public let delegate: SpeedcheckerSDK.InternetSpeedTestDelegate?
  open var downloadTimeout: Foundation.TimeInterval
  open var uploadTimeout: Foundation.TimeInterval
  public init(clientID: Swift.Int = 0, userID: Swift.Int = 0, delegate: SpeedcheckerSDK.InternetSpeedTestDelegate?)
  open func start(_ servers: [SpeedcheckerSDK.SpeedTestServer], completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func start(_ servers: [SpeedcheckerSDK.SCServer], completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func start(_ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func startTest(_ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func forceFinish(_ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func currentNetwork() -> SpeedcheckerSDK.SpeedTestNetwork
  public static func clearTempDirectory()
  public func speedTestServers(_ servers: [SpeedcheckerSDK.SCServer]?) -> [SpeedcheckerSDK.SpeedTestServer]?
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc override dynamic public init()
}
extension InternetSpeedTest : SpeedcheckerSDK.SwiftyPingDelegate {
  public func swiftyPing(_ ping: SpeedcheckerSDK.SwiftyPing, response: SpeedcheckerSDK.PingResponse)
  public func swiftyPing(_ ping: SpeedcheckerSDK.SwiftyPing, error: Foundation.NSError)
}
public protocol InternetSpeedTestDelegate {
  func internetTest(finish error: SpeedcheckerSDK.SpeedTestError)
  func internetTest(finish result: SpeedcheckerSDK.SpeedTestResult)
  func internetTest(received servers: [SpeedcheckerSDK.SpeedTestServer])
  func internetTest(selected server: SpeedcheckerSDK.SpeedTestServer, latency: Swift.Int)
  func internetTestDownloadStart()
  func internetTestDownloadFinish()
  func internetTestDownload(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed?)
  func internetTestUploadStart()
  func internetTestUploadFinish()
  func internetTestUpload(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed?)
}
public struct SCClient {
  public init(ID: Swift.Int?, applicationHash: Swift.String? = nil, name: Swift.String? = nil)
}
@_hasMissingDesignatedInitializers public class SCDataController {
  @objc deinit
}
public enum SCLatencySpeedType {
  case http
  case icmp
  public static func == (a: SpeedcheckerSDK.SCLatencySpeedType, b: SpeedcheckerSDK.SCLatencySpeedType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct SCLatencySpeed {
  public let type: SpeedcheckerSDK.SCLatencySpeedType
}
extension SCLatencySpeed {
  public var valueInMs: Swift.Int? {
    get
  }
}
public func == (lhs: SpeedcheckerSDK.SCLatencySpeed, rhs: SpeedcheckerSDK.SCLatencySpeed) -> Swift.Bool
public struct SCLocation {
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public let accuracyInMeters: Swift.Int?
  public let ipAddress: Swift.String?
  public var countryCode: Swift.String?
  public var cityName: Swift.String?
  public var country: Swift.String? {
    get
  }
  public init(latitude: Swift.Double?, longitude: Swift.Double?, accuracyInMeters: Swift.Int?, ipAddress: Swift.String?, countryCode: Swift.String?, cityName: Swift.String?)
}
public enum SCServerType {
  case speedchecker
  case ookla
  public static func == (a: SpeedcheckerSDK.SCServerType, b: SpeedcheckerSDK.SCServerType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct SCServer : Swift.Equatable {
  public let ID: Swift.Int?
  public let version: Swift.Int?
  public let type: SpeedcheckerSDK.SCServerType
  public let scheme: Swift.String?
  public let domain: Swift.String?
  public let port: Swift.Int?
  public let downloadFolderPath: Swift.String?
  public let uploadFolderPath: Swift.String?
  public let uploadScript: Swift.String?
  public let userIP: Swift.String?
  public let userISP: Swift.String?
  public let customDownloadLink: Swift.String?
  public let customUploadLink: Swift.String?
  public var location: SpeedcheckerSDK.SCLocation?
  public var description: Swift.String {
    get
  }
  public init(ID: Swift.Int?, version: Swift.Int?, type: SpeedcheckerSDK.SCServerType = .speedchecker, scheme: Swift.String?, domain: Swift.String?, port: Swift.Int? = nil, downloadFolderPath: Swift.String?, uploadFolderPath: Swift.String?, uploadScript: Swift.String?, location: SpeedcheckerSDK.SCLocation?, userIP: Swift.String?, userISP: Swift.String?)
  public init(customUploadLink: Swift.String, customDownloadLink: Swift.String)
  public func domainURL() -> Foundation.URL?
}
public func == (lhs: SpeedcheckerSDK.SCServer, rhs: SpeedcheckerSDK.SCServer) -> Swift.Bool
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SCServerDataController : SpeedcheckerSDK.SCDataController {
  public static func getServers(for client: SpeedcheckerSDK.SCClient? = nil, completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  public static func getAllServers(_ completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  public static func getCustomServers(from link: Swift.String, completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  public static func getOoklaServers(_ completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  @objc deinit
}
public class SCServerSelecter {
  public init(_ servers: [SpeedcheckerSDK.SCServer], timeout: Foundation.TimeInterval = 1, delegate: SpeedcheckerSDK.SCServerSelecterDelegate?)
  public func start()
  @objc deinit
}
public protocol SCServerSelecterDelegate {
  func serverSelecter(_ selecter: SpeedcheckerSDK.SCServerSelecter, status: SpeedcheckerSDK.SCTestStatus)
  func serverSelecter(_ selecter: SpeedcheckerSDK.SCServerSelecter, didSelect server: SpeedcheckerSDK.SCServer, latency: SpeedcheckerSDK.SCLatencySpeed?)
}
public enum SCTestStatus {
  case ready
  case progress
  case finished
  case failed
  public static func == (a: SpeedcheckerSDK.SCTestStatus, b: SpeedcheckerSDK.SCTestStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum SpeedTestError : Swift.Int {
  case invalidSettings
  case invalidServers
  case inProgress
  case failed
  case notSaved
  case cancelled
  case locationUndefined
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum SpeedTestNetworkType : Swift.Int {
  case any
  case wifi
  case cellular
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SpeedTestNetwork {
  final public let type: SpeedcheckerSDK.SpeedTestNetworkType
  final public let cellularCarrier: CoreTelephony.CTCarrier?
  final public let cellularTechnology: Swift.String?
  open var networkShortDescription: Swift.String? {
    get
  }
  @objc deinit
}
public enum SpeedTestLatencyType : Swift.Int {
  case http
  case icmp
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SpeedTestResult {
  open var network: SpeedcheckerSDK.SpeedTestNetwork
  final public let server: SpeedcheckerSDK.SpeedTestServer
  final public let latencyType: SpeedcheckerSDK.SpeedTestLatencyType
  final public let latencyInMs: Swift.Int
  final public let downloadSpeed: SpeedcheckerSDK.SpeedTestSpeed
  final public let uploadSpeed: SpeedcheckerSDK.SpeedTestSpeed
  final public let ipAddress: Swift.String?
  final public let ispName: Swift.String?
  final public let date: Foundation.Date?
  public static func create(withPlain date: Foundation.Date, latencyType: Swift.String?, latencyInMs: Swift.Int, downloadInBps: Swift.Double, uploadInBps: Swift.Double, ipAddress: Swift.String?, ispName: Swift.String?, networkType: Swift.String?, serverID: Swift.Int, serverDomain: Swift.String?, serverCityName: Swift.String?, serverCountryCode: Swift.String?) -> SpeedcheckerSDK.SpeedTestResult
  @objc deinit
}
public class SpeedTestServer {
  final public let ID: Swift.Int?
  final public let type: SpeedcheckerSDK.SCServerType
  final public let scheme: Swift.String?
  final public let domain: Swift.String?
  final public let port: Swift.Int?
  final public let countryCode: Swift.String?
  final public let cityName: Swift.String?
  public var country: Swift.String? {
    get
  }
  public init(ID: Swift.Int?, type: SpeedcheckerSDK.SCServerType = .speedchecker, scheme: Swift.String?, domain: Swift.String?, port: Swift.Int? = nil, countryCode: Swift.String?, cityName: Swift.String?)
  @objc deinit
}
public class SpeedTestSpeed {
  final public let bps: Swift.Double
  public init(bps value: Swift.Double)
  public init(kbps value: Swift.Double)
  public init(mbps value: Swift.Double)
  open var kbps: Swift.Double {
    get
  }
  open var mbps: Swift.Double {
    get
  }
  open var descriptionInKbps: Swift.String {
    get
  }
  open var descriptionInMbps: Swift.String {
    get
  }
  @objc deinit
}
public struct SSDPService : Swift.Equatable {
  public let cacheControl: Foundation.Date
  public let location: Foundation.URL
  public let server: Swift.String
  public let searchTarget: Swift.String
  public let uniqueServiceName: Swift.String
  public let otherHeaders: [Swift.String : Swift.String]
  public static func == (lhs: SpeedcheckerSDK.SSDPService, rhs: SpeedcheckerSDK.SSDPService) -> Swift.Bool
}
public struct UPNPAction {
  public struct TotalBytesReceived : SpeedcheckerSDK.UPNPActionable {
    public init()
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesReceived: Swift.Int
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
  }
  public struct TotalBytesSent : SpeedcheckerSDK.UPNPActionable {
    public init()
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesSent: Swift.Int
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
  }
  public struct ByteStatistics : SpeedcheckerSDK.UPNPActionable {
    public init()
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesSent: Swift.Int
      public let NewTotalBytesReceived: Swift.Int
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
  }
  public struct ByteStatsForAssociatedDev : SpeedcheckerSDK.UPNPActionable {
    public init(associatedDeviceMACAddress: Swift.String)
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesSent: Swift.Int
      public let NewTotalBytesReceived: Swift.Int
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
  }
}
public protocol UPNPActionable {
  associatedtype Response : Swift.Decodable, Swift.Encodable
  var name: Swift.String { get }
}
extension UPNPActionable {
  public var requestElement: Swift.String {
    get
  }
  public var responseElement: Swift.String {
    get
  }
  public func requestBody(via service: SpeedcheckerSDK.UPNPService) -> Foundation.Data?
}
public enum UPNPDeviceType : Swift.String {
  case internetGateway
  case wlanAccessPoint
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum UPNPServiceType : Swift.String {
  case wanAny
  case wanCommonInterfaceConfig
  case wanIPConnection
  case wanPPPConnection
  case wlanConfiguration
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct UPNPVersion : Swift.Codable {
  public let major: Swift.Int?
  public let minor: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UPNPService : Swift.Codable {
  public let serviceId: Swift.String?
  public let serviceType: Swift.String
  public let controlURL: Swift.String?
  public let eventSubURL: Swift.String?
  public let SCPDURL: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UPNPDeviceList : Swift.Codable {
  public let items: [SpeedcheckerSDK.UPNPDevice]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case items
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UPNPServiceList : Swift.Codable {
  public let items: [SpeedcheckerSDK.UPNPService]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case items
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UPNPDevice : Swift.Codable {
  public let deviceType: Swift.String?
  public let deviceList: SpeedcheckerSDK.UPNPDeviceList?
  public let manufacturer: Swift.String?
  public let manufacturerURL: Foundation.URL?
  public let modelDescription: Swift.String?
  public let modelName: Swift.String?
  public let modelNumber: Swift.String?
  public let modelURL: Foundation.URL?
  public let friendlyName: Swift.String?
  public let serialNumber: Swift.String?
  public let UDN: Swift.String?
  public let UPC: Swift.String?
  public var serviceURL: Foundation.URL?
  public let serviceList: SpeedcheckerSDK.UPNPServiceList?
  public func first(service value: SpeedcheckerSDK.UPNPServiceType) -> SpeedcheckerSDK.UPNPService?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum UPNPDiscoverError : Swift.Error {
  case unavailable
  case unknown
  case busy
  case reason(Swift.String)
}
public protocol UPNPDiscoverDelegate {
  func upnpDiscover(didUpdate error: SpeedcheckerSDK.UPNPDiscoverError)
  func upnpDiscover(didUpdate device: SpeedcheckerSDK.UPNPDevice)
}
public class UPNPDiscover {
  final public let deviceType: SpeedcheckerSDK.UPNPDeviceType
  public var delegate: SpeedcheckerSDK.UPNPDiscoverDelegate?
  public var device: SpeedcheckerSDK.UPNPDevice? {
    get
  }
  public init(_ device: SpeedcheckerSDK.UPNPDeviceType, delegate: SpeedcheckerSDK.UPNPDiscoverDelegate?)
  public func update()
  public func action<Action>(_ type: Action, via service: SpeedcheckerSDK.UPNPServiceType, completion: @escaping (Action.Response?, SpeedcheckerSDK.UPNPDiscoverError?) -> Swift.Void) where Action : SpeedcheckerSDK.UPNPActionable
  @objc deinit
}
public class WifiSpeedTest {
  public init(_ ipAddress: Swift.String? = nil, delegate: SpeedcheckerSDK.WifiSpeedTestDelegate?)
  public func start()
  @objc deinit
}
public protocol WifiSpeedTestDelegate {
  func wifiTest(finish error: SpeedcheckerSDK.SCTestError)
  func wifiTest(finish speed: SpeedcheckerSDK.SpeedTestSpeed)
  func wifiTest(latency: Swift.Int)
  func wifiTest(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed)
}
extension SpeedcheckerSDK.SCLatencySpeed : Swift.Equatable {}
